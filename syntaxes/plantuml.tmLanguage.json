{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PlantUML",
  "scopeName": "source.plantuml",
  "patterns": [
    {
      "comment": "Top-level diagram definition",
      "begin": "^@start(uml|json|yaml|gantt|mindmap|wbs|math|salt|salt)\\s*([^\\s{]*)?",
      "beginCaptures": {
        "1": { "name": "keyword.control.diagram.begin.plantuml" },
        "2": { "name": "entity.name.type.diagram.plantuml" }
      },
      "end": "^@end\\1",
      "endCaptures": {
        "0": { "name": "keyword.control.diagram.end.plantuml" }
      },
      "patterns": [{ "include": "#diagram-content" }]
    }
  ],
  "repository": {
    "diagram-content": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#preprocessor-directives" },
        { "include": "#skinparams" },
        { "include": "#keywords-general" },
        { "include": "#stereotypes" },
        { "include": "#colors-and-formatting" },
        { "include": "#notes" },
        { "include": "#separators-creole" },
        { "include": "#arrows" },
        { "include": "#use-case-elements" },
        { "include": "#class-diagram-elements" },
        { "include": "#grouping-elements" },
        { "include": "#common-elements-like-actor-component-etc" }
      ]
    },

    "comments": {
      "patterns": [
        {
          "name": "comment.line.apostrophe.plantuml",
          "match": "^\\s*'.*$"
        },
        {
          "name": "comment.block.plantuml",
          "begin": "/'",
          "end": "'/",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.plantuml" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.plantuml" }
          }
        },
        {
          "name": "comment.block.documentation.plantuml",
          "begin": "/''",
          "end": "'/",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.plantuml" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.plantuml" }
          }
        }
      ]
    },

    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.plantuml",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape.plantuml", "match": "\\\\." },
            { "include": "#creole-formatting-inline" }
          ]
        }
      ]
    },

    "preprocessor-directives": {
      "patterns": [
        {
          "name": "keyword.control.preprocessor.plantuml",
          "match": "^!(include|import|define|undef|ifdef|ifndef|if|else|elseif|endif|theme|pragma|definelong|function|procedure|endfunction|endprocedure|return|unquoted|global|log|dump_memory|assert|include_many|include_once|startsub|endsub|includesub|importurl|includeurl)\\b"
        },
        {
          "name": "variable.parameter.preprocessor.plantuml",
          "match": "\\$[\\w]+"
        }
      ]
    },

    "skinparams": {
      "patterns": [
        {
          "name": "keyword.other.skinparam.plantuml",
          "match": "\\bskinparam\\b"
        },
        {
          "comment": "skinparam block",
          "begin": "\\bskinparam\\s+\\w+\\s*\\{",
          "beginCaptures": {
            "0": { "name": "keyword.other.skinparam.plantuml" }
          },
          "end": "\\}",
          "endCaptures": {
            "0": { "name": "keyword.other.skinparam.plantuml" }
          },
          "name": "meta.skinparam.block.plantuml",
          "patterns": [
            { "include": "#comments" },
            { "include": "#strings" },
            {
              "match": "([\\w.]+)(\\s+)([^;}\\n]+)",
              "captures": {
                "1": { "name": "variable.other.skinparam.key.plantuml" },
                "3": { "name": "string.unquoted.skinparam.value.plantuml" }
              }
            }
          ]
        }
      ]
    },

    "keywords-general": {
      "patterns": [
        {
          "name": "keyword.operator.as.plantuml",
          "match": "\\b(as)\\b"
        },
        {
          "name": "keyword.control.direction.plantuml",
          "match": "\\b(left to right direction|top to bottom direction|right to left direction|bottom to top direction)\\b"
        },
        {
          "name": "keyword.control.plantuml",
          "match": "\\b(title|header|footer|legend|caption|newpage|alt|else|opt|loop|par|break|critical|group|ref|mainframe|style|hide|show|remove|set|!pragma)\\b"
        },
        {
          "name": "keyword.control.end.plantuml",
          "match": "\\b(end note|end legend|end header|end footer|end title|end box|end group|end package|end if|end switch|end style|end ref|end inline_sprite|end exercise)\\b"
        }
      ]
    },

    "stereotypes": {
      "patterns": [
        {
          "name": "entity.other.stereotype.plantuml",
          "match": "<<([^(<<>>)]*)>>"
        },
        {
          "comment": "Stereotype with spot character like <<(X,color)>>",
          "name": "entity.other.stereotype.spot.plantuml",
          "match": "<<\\s*\\(\\s*([A-Za-z])\\s*,\\s*([#\\w]+)\\s*\\)\\s*([^<>]*)?\\s*>>",
          "captures": {
            "1": { "name": "entity.name.tag.stereotype.char.plantuml" },
            "2": { "name": "support.constant.color.plantuml" },
            "3": { "name": "entity.name.tag.stereotype.text.plantuml" }
          }
        }
      ]
    },

    "colors-and-formatting": {
      "patterns": [
        {
          "name": "support.constant.color.plantuml",
          "match": "#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}|[A-Za-z]+)"
        }
      ]
    },

    "notes": {
      "patterns": [
        {
          "name": "keyword.other.note.plantuml",
          "match": "\\b(note|floating note)\\b"
        },
        {
          "name": "keyword.other.note.position.plantuml",
          "match": "\\b(left of|right of|top of|bottom of|over|on link)\\b"
        }
      ]
    },

    "separators-creole": {
      "patterns": [
        {
          "name": "meta.separator.creole.plantuml",
          "match": "^\\s*(-{2,}|\\.{2,}|={2,}|_{2,})\\s*$"
        }
      ]
    },

    "creole-formatting-inline": {
      "patterns": [
        {
          "name": "markup.bold.creole.plantuml",
          "match": "\\*\\*[^\\*\\*\\n]+\\*\\*"
        },
        { "name": "markup.italic.creole.plantuml", "match": "//[^//\\n]+//" },
        { "name": "markup.strike.creole.plantuml", "match": "--[^--\\n]+--" },
        {
          "name": "markup.underline.creole.plantuml",
          "match": "__[^__\\n]+__"
        },
        {
          "name": "markup.monospace.creole.plantuml",
          "match": "\"\"[^\"]+\"\""
        },
        {
          "name": "markup.superscript.creole.plantuml",
          "match": "\\^\\^[^^\\n]+\\^\\^"
        },
        {
          "name": "markup.subscript.creole.plantuml",
          "match": ",,[^,,\\n]+,,"
        },
        {
          "name": "markup.heading.creole.plantuml",
          "match": "^={1,5}[^=\\n]+"
        },
        {
          "name": "markup.list.unnumbered.creole.plantuml",
          "match": "^\\s*\\*\\s+"
        },
        {
          "name": "markup.list.numbered.creole.plantuml",
          "match": "^\\s*#\\s+"
        },
        {
          "name": "markup.link.creole.plantuml",
          "match": "\\[\\[[^\\]]+\\]\\]"
        },
        {
          "name": "markup.image.creole.plantuml",
          "match": "\\{\\{[^\\}]+\\}\\}|<&\\w+>"
        }
      ]
    },

    "arrows": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.plantuml",
          "match": "<\\|\\.\\.|\\.\\.\\|>"
        },
        { "name": "keyword.operator.arrow.plantuml", "match": "<\\|-|-\\|>" },
        { "name": "keyword.operator.arrow.plantuml", "match": "x-|-\\[x\\]" },
        { "name": "keyword.operator.arrow.plantuml", "match": "o-|-\\[o\\]" },
        {
          "name": "keyword.operator.arrow.plantuml",
          "match": "\\}-|-\\[\\}\\]"
        },
        {
          "name": "keyword.operator.arrow.plantuml",
          "match": "(<\\|)?(\\.{1,2}|-{1,3}|={1,2}|~{1,2})(\\[(hidden|bold|dashed|dotted|#\\w+)\\])?(\\|>|\\*|o|#|x|\\+)?(--?|>|/>|//>|\\\\>|\\\\\\\\>|<<|>>|)"
        }
      ]
    },

    "common-elements-like-actor-component-etc": {
      "patterns": [
        {
          "name": "keyword.other.element.plantuml",
          "match": "\\b(actor|rectangle|package|node|interface|component|database|cloud|storage|frame|boundary|control|entity|collections|folder|card|queue|stack|agent|artifact|circle|hexagon|label|person|process|state|robust|concise|binary|clock|analog|map|json|yaml|salt|archimate)\\b"
        }
      ]
    },

    "use-case-elements": {
      "patterns": [
        {
          "comment": "Actor definition e.g., :User:, :Another Actor: as A1, actor User, actor \"User with Spaces\"",
          "match": "(^\\s*actor\\s+)?(\"[^\"]+\"|:[^:]+:|\\b\\w+\\b)(\\s*/)?(?:\\s+as\\s+(\\w+|\"[^\"]+\"|\\([^)]+\\)))?",
          "captures": {
            "1": { "name": "keyword.other.actor.plantuml" },
            "2": { "name": "entity.name.actor.plantuml" },
            "3": { "name": "keyword.operator.business.plantuml" },
            "4": { "name": "variable.other.alias.plantuml" }
          }
        },
        {
          "comment": "Usecase definition e.g., (Login), (Manage Users) as UC_Manage, usecase (Register), usecase Register",
          "match": "(^\\s*usecase\\s+)?(\"[^\"]+\"|\\((?:[^()]|\\n)+\\)|\\b\\w+\\b)(\\s*/)?(?:\\s+as\\s+(\\w+|\"[^\"]+\"|\\((?:[^()]|\\n)+\\)))?",
          "captures": {
            "1": { "name": "keyword.other.usecase.plantuml" },
            "2": { "name": "entity.name.usecase.plantuml" },
            "3": { "name": "keyword.operator.business.plantuml" },
            "4": { "name": "variable.other.alias.plantuml" }
          }
        },
        {
          "comment": "Usecase description with 'as' - usecase UC_Name as \"Description...\"",
          "match": "^\\s*usecase\\s+(\\w+)\\s+as\\s+(\"[^\"\\n]*(?:\\n[^\"\\n]*)*\")",
          "captures": {
            "0": { "name": "keyword.other.usecase.plantuml" },
            "1": { "name": "entity.name.usecase.plantuml" },
            "2": { "name": "string.quoted.description.plantuml" }
          }
        }
      ]
    },

    "class-diagram-elements": {
      "patterns": [
        {
          "comment": "Class, interface, enum, etc. definition",
          "begin": "^\\s*(abstract\\s+class|abstract\\s+enum|class|interface|enum|annotation|entity|protocol|stereotype|struct)\\s+(\"(?:[^\"\\\\]|\\\\.)*\"|[\\w$\\.]+)\\s*(<<.*?>>)?\\s*(<[^>]*>)?\\s*(#[\\w]+)?\\s*(extends\\s+[\\w.,\\s<>]+)?\\s*(implements\\s+[\\w.,\\s<>]+)?\\s*({)?",
          "beginCaptures": {
            "1": { "name": "storage.type.declaration.plantuml" },
            "2": { "name": "entity.name.class.plantuml" },
            "3": { "name": "entity.other.stereotype.plantuml" },
            "4": { "name": "meta.generics.plantuml" },
            "5": { "name": "support.constant.color.plantuml" },
            "6": { "name": "storage.modifier.extends.plantuml" },
            "7": { "name": "storage.modifier.implements.plantuml" },
            "8": { "name": "punctuation.section.block.begin.plantuml" }
          },
          "end": "(?=^\\s*}\\s*$)|(})",
          "endCaptures": {
            "1": { "name": "punctuation.section.block.end.plantuml" }
          },
          "name": "meta.class.plantuml",
          "patterns": [
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#separators-creole" },
            {
              "comment": "Class members (fields/methods)",
              "match": "^\\s*([#~\\-+]|static|abstract|{\\s*(static|abstract|classifier|field|method)\\s*})?\\s*([\\w$\\.<> \\[\\]]+?)(\\s*\\(.*?\\))?(\\s*:\\s*([\\w$\\.<>\\[\\]\\s]+))?(\\s*\\{\\s*(static|abstract|classifier|field|method)\\s*\\})?;?",
              "captures": {
                "1": { "name": "storage.modifier.visibility.plantuml" },
                "2": { "name": "storage.modifier.other.plantuml" },
                "3": { "name": "variable.other.property.plantuml" },
                "4": { "name": "meta.function.parameters.plantuml" },
                "5": { "name": "keyword.operator.declaration.plantuml" },
                "6": { "name": "storage.type.plantuml" },
                "7": { "name": "storage.modifier.other.plantuml" }
              }
            }
          ]
        },
        {
          "name": "keyword.other.class.special-forms.plantuml",
          "match": "\\(\\)|<>|<>"
        },
        {
          "comment": "Lollipop interface",
          "match": "(\\w+|\\\"[^\\\"]+\\\")\\s*\\(\\)\\s*(-|--)\\s*(\\w+|\\\"[^\\\"]+\\\")"
        },
        {
          "comment": "Association Class",
          "match": "\\(([^,]+),\\s*([^)]+)\\)\\s*([.-]+)\\s*(\\w+|\"[^\"]+\")"
        }
      ]
    },

    "grouping-elements": {
      "patterns": [
        {
          "comment": "Package, node, folder, etc. definition block",
          "begin": "^\\s*(package|node|folder|frame|cloud|database|rectangle|group|card|queue|stack|partition)\\s+(\"(?:[^\"\\\\]|\\\\.)*\")?(\\s*<<.*?>>)?\\s*(#[\\w/|]+)?\\s*(\\[\\[.*\\]\\])?\\s*({)?",
          "beginCaptures": {
            "1": { "name": "keyword.control.grouping.plantuml" },
            "2": { "name": "entity.name.package.plantuml" },
            "3": { "name": "entity.other.stereotype.plantuml" },
            "4": { "name": "support.constant.color.plantuml" },
            "5": { "name": "markup.underline.link.plantuml" },
            "6": { "name": "punctuation.section.block.begin.plantuml" }
          },
          "end": "(?=^\\s*}\\s*$)|(})",
          "endCaptures": {
            "1": { "name": "punctuation.section.block.end.plantuml" }
          },
          "name": "meta.package.plantuml",
          "patterns": [{ "include": "#diagram-content" }]
        }
      ]
    }
  }
}
