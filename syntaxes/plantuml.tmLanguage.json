{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PlantUML",
  "scopeName": "source.plantuml",
  "patterns": [
    {
      "include": "#diagrams"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "diagrams": {
      "comment": "Finds the main @startuml, @startjson, etc. blocks.",
      "begin": "(?i)(^@start(uml|salt|json|yaml|wbs|mindmap|gantt|nwdiag|state|class|sequence|component|object|deployment))",
      "end": "(?i)(^@end(uml|salt|json|yaml|wbs|mindmap|gantt|nwdiag|state|class|sequence|component|object|deployment))",
      "beginCaptures": {
        "1": { "name": "keyword.control.start.plantuml" }
      },
      "endCaptures": {
        "1": { "name": "keyword.control.end.plantuml" }
      },
      "name": "meta.diagram.plantuml",
      "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#preprocessor" },
        { "include": "#skinparam" },
        { "include": "#style_blocks" },
        { "include": "#notes" },
        { "include": "#relationships" },
        { "include": "#entity_declarations" },
        { "include": "#keywords" },
        { "include": "#creole_html" }
      ]
    },

    "comments": {
      "patterns": [
        {
          "name": "comment.line.apostrophe.plantuml",
          "match": "^\\s*'.*$"
        },
        {
          "name": "comment.block.plantuml",
          "begin": "/'",
          "end": "'/"
        }
      ]
    },

    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.plantuml",
          "begin": "\"",
          "end": "\""
        }
      ]
    },

    "relationships": {
      "comment": "Handles entity relationships, including cardinality, arrows, and labels.",
      "match": "^\\s*(\\[[^\\]]+\\]|\\w+|\\(.*?\\)|\".*?\")(\\s+\"[^\"]+\")?\\s*(<\\|-|-\\|>|[ox*#]?(<\\|)?(\\.|-|=){1,4}[.<~=]*(\\w{1,5})?[.<~=]*(\\|>)?(?:[ox*#])?)\\s*(\\[[^\\]]+\\]|\\w+|\\(.*?\\)|\".*?\")(\\s+\"[^\"]+\")?(\\s*:\\s*(.*))?$",
      "captures": {
        "1": { "name": "variable.language.entity.source.plantuml" },
        "2": { "name": "string.quoted.double.cardinality.plantuml" },
        "3": { "name": "keyword.operator.relation.plantuml" },
        "8": { "name": "variable.language.entity.target.plantuml" },
        "9": { "name": "string.quoted.double.cardinality.plantuml" },
        "10": { "name": "meta.relation.label.plantuml" },
        "11": { "name": "string.unquoted.label.plantuml" }
      }
    },

    "entity_declarations": {
        "comment": "Catches declarations of actors, classes, etc., including stereotypes and colors.",
        "match": "^\\s*(abstract|actor|participant|class|interface|enum|component|package|node|state|object|database|boundary|control|entity|card|cloud|artifact|folder|frame|storage)(\\s+(\".*?\"|[\\w_]+))?(\\s+as\\s+[\\w_]+)?(\\s*<<.*?>>)?(\\s*#\\w+)?(?:\\s+\\{)?",
        "captures": {
            "1": { "name": "storage.type.plantuml" },
            "2": { "name": "entity.name.class.plantuml" },
            "4": { "name": "keyword.control.as.plantuml" },
            "5": { "name": "entity.other.stereotype.plantuml" },
            "6": { "name": "support.constant.color.plantuml" }
        }
    },

    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.plantuml",
          "match": "(?i)^\\s*(autonumber|newpage|alt|else|elseif|opt|loop|par|break|critical|group|box|if|then|endif|fork|repeat|while|endwhile|case|when|start|stop|end|kill|detach|legend|endlegend|partition)\\b"
        },
        {
          "name": "keyword.other.plantuml",
          "match": "(?i)^\\s*(title|caption|header|footer|skinparam|skinparam|hide|show|remove|scale|sprite|namespace|left to right direction|top to bottom direction|allow_mixing)\\b"
        },
        {
          "name": "storage.modifier.plantuml",
          "match": "\\{(static|abstract|classifier)\\}"
        }
      ]
    },

    "preprocessor": {
        "comment": "Matches preprocessor directives starting with !",
        "match": "^\\s*!\\w+",
        "name": "keyword.control.preprocessor.plantuml"
    },

    "skinparam": {
      "comment": "Basic skinparam highlighting.",
      "begin": "(?i)(^\\s*skinparam)",
      "end": "$",
      "beginCaptures": { "1": {"name": "keyword.other.skinparam.plantuml"} },
      "patterns": [
          {"include": "#comments"}
      ]
    },

    "style_blocks": {
        "comment": "Catches <style> blocks.",
        "begin": "(?i)(^\\s*<style>)",
        "end": "(?i)(^\\s*</style>)",
        "beginCaptures": {"1": {"name": "keyword.other.style.plantuml"}},
        "endCaptures": {"1": {"name": "keyword.other.style.plantuml"}},
        "patterns": [
            {
                "match": "(\\w+)\\s*\\{",
                "captures": {"1": {"name": "entity.name.tag.style.plantuml"}}
            }
        ]
    },

    "notes": {
      "comment": "Handles single-line and multi-line notes.",
      "begin": "(?i)(^\\s*(rnote|hnote|note)(?:\\s+(left|right|top|bottom))?(?:\\s+(of|over|on|as))?)",
      "end": "(?i)(^\\s*end\\s*(r?h?note)|$)",
      "beginCaptures": {
        "1": { "name": "keyword.other.note.plantuml" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other.note.plantuml" }
      },
      "name": "comment.block.note.plantuml"
    },
    "creole_html": {
        "comment": "Basic highlighting for Creole and embedded HTML tags.",
        "patterns": [
            {
                "name": "markup.bold.creole.plantuml",
                "match": "(\\*\\*).*?(\\*\\*)"
            },
            {
                "name": "markup.italic.creole.plantuml",
                "match": "(//).*?(//)"
            },
            {
                "name": "markup.strike.creole.plantuml",
                "match": "(--).*?(--)"
            },
            {
                "name": "markup.underline.creole.plantuml",
                "match": "(__).*?(__)"
            },
            {
                "name": "entity.name.tag.html.plantuml",
                "match": "</?\\w+.*?>"
            }
        ]
    }
  }
}
